#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CuttingEdgeInvMgmtSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="countertop")]
	public partial class dbCounterTopsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertColor(Color instance);
    partial void UpdateColor(Color instance);
    partial void DeleteColor(Color instance);
    partial void InsertBarTop(BarTop instance);
    partial void UpdateBarTop(BarTop instance);
    partial void DeleteBarTop(BarTop instance);
    partial void InsertKitchen(Kitchen instance);
    partial void UpdateKitchen(Kitchen instance);
    partial void DeleteKitchen(Kitchen instance);
    partial void InsertVanity(Vanity instance);
    partial void UpdateVanity(Vanity instance);
    partial void DeleteVanity(Vanity instance);
    #endregion
		
		public dbCounterTopsDataContext() : 
				base(global::CuttingEdgeInvMgmtSystem.Properties.Settings.Default.countertopConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public dbCounterTopsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbCounterTopsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbCounterTopsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbCounterTopsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Color> Colors
		{
			get
			{
				return this.GetTable<Color>();
			}
		}
		
		public System.Data.Linq.Table<BarTop> BarTops
		{
			get
			{
				return this.GetTable<BarTop>();
			}
		}
		
		public System.Data.Linq.Table<Kitchen> Kitchens
		{
			get
			{
				return this.GetTable<Kitchen>();
			}
		}
		
		public System.Data.Linq.Table<Vanity> Vanities
		{
			get
			{
				return this.GetTable<Vanity>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Colors")]
	public partial class Color : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ColorID;
		
		private string _Color1;
		
		private EntitySet<BarTop> _BarTops;
		
		private EntitySet<Kitchen> _Kitchens;
		
		private EntitySet<Vanity> _Vanities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnColorIDChanging(int value);
    partial void OnColorIDChanged();
    partial void OnColor1Changing(string value);
    partial void OnColor1Changed();
    #endregion
		
		public Color()
		{
			this._BarTops = new EntitySet<BarTop>(new Action<BarTop>(this.attach_BarTops), new Action<BarTop>(this.detach_BarTops));
			this._Kitchens = new EntitySet<Kitchen>(new Action<Kitchen>(this.attach_Kitchens), new Action<Kitchen>(this.detach_Kitchens));
			this._Vanities = new EntitySet<Vanity>(new Action<Vanity>(this.attach_Vanities), new Action<Vanity>(this.detach_Vanities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ColorID
		{
			get
			{
				return this._ColorID;
			}
			set
			{
				if ((this._ColorID != value))
				{
					this.OnColorIDChanging(value);
					this.SendPropertyChanging();
					this._ColorID = value;
					this.SendPropertyChanged("ColorID");
					this.OnColorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Color", Storage="_Color1", DbType="VarChar(20)")]
		public string Color1
		{
			get
			{
				return this._Color1;
			}
			set
			{
				if ((this._Color1 != value))
				{
					this.OnColor1Changing(value);
					this.SendPropertyChanging();
					this._Color1 = value;
					this.SendPropertyChanged("Color1");
					this.OnColor1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_BarTop", Storage="_BarTops", ThisKey="ColorID", OtherKey="ColorID")]
		public EntitySet<BarTop> BarTops
		{
			get
			{
				return this._BarTops;
			}
			set
			{
				this._BarTops.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Kitchen", Storage="_Kitchens", ThisKey="ColorID", OtherKey="ColorID")]
		public EntitySet<Kitchen> Kitchens
		{
			get
			{
				return this._Kitchens;
			}
			set
			{
				this._Kitchens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Vanity", Storage="_Vanities", ThisKey="ColorID", OtherKey="ColorID")]
		public EntitySet<Vanity> Vanities
		{
			get
			{
				return this._Vanities;
			}
			set
			{
				this._Vanities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BarTops(BarTop entity)
		{
			this.SendPropertyChanging();
			entity.Color = this;
		}
		
		private void detach_BarTops(BarTop entity)
		{
			this.SendPropertyChanging();
			entity.Color = null;
		}
		
		private void attach_Kitchens(Kitchen entity)
		{
			this.SendPropertyChanging();
			entity.Color = this;
		}
		
		private void detach_Kitchens(Kitchen entity)
		{
			this.SendPropertyChanging();
			entity.Color = null;
		}
		
		private void attach_Vanities(Vanity entity)
		{
			this.SendPropertyChanging();
			entity.Color = this;
		}
		
		private void detach_Vanities(Vanity entity)
		{
			this.SendPropertyChanging();
			entity.Color = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BarTop")]
	public partial class BarTop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BarTopID;
		
		private int _ColorID;
		
		private System.Nullable<decimal> _Length;
		
		private System.Nullable<int> _Width;
		
		private EntityRef<Color> _Color;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBarTopIDChanging(int value);
    partial void OnBarTopIDChanged();
    partial void OnColorIDChanging(int value);
    partial void OnColorIDChanged();
    partial void OnLengthChanging(System.Nullable<decimal> value);
    partial void OnLengthChanged();
    partial void OnWidthChanging(System.Nullable<int> value);
    partial void OnWidthChanged();
    #endregion
		
		public BarTop()
		{
			this._Color = default(EntityRef<Color>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BarTopID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BarTopID
		{
			get
			{
				return this._BarTopID;
			}
			set
			{
				if ((this._BarTopID != value))
				{
					this.OnBarTopIDChanging(value);
					this.SendPropertyChanging();
					this._BarTopID = value;
					this.SendPropertyChanged("BarTopID");
					this.OnBarTopIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorID", DbType="Int NOT NULL")]
		public int ColorID
		{
			get
			{
				return this._ColorID;
			}
			set
			{
				if ((this._ColorID != value))
				{
					if (this._Color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIDChanging(value);
					this.SendPropertyChanging();
					this._ColorID = value;
					this.SendPropertyChanged("ColorID");
					this.OnColorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Width", DbType="Int")]
		public System.Nullable<int> Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_BarTop", Storage="_Color", ThisKey="ColorID", OtherKey="ColorID", IsForeignKey=true)]
		public Color Color
		{
			get
			{
				return this._Color.Entity;
			}
			set
			{
				Color previousValue = this._Color.Entity;
				if (((previousValue != value) 
							|| (this._Color.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Color.Entity = null;
						previousValue.BarTops.Remove(this);
					}
					this._Color.Entity = value;
					if ((value != null))
					{
						value.BarTops.Add(this);
						this._ColorID = value.ColorID;
					}
					else
					{
						this._ColorID = default(int);
					}
					this.SendPropertyChanged("Color");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Kitchen")]
	public partial class Kitchen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _KitchenID;
		
		private int _ColorID;
		
		private System.Nullable<decimal> _Length;
		
		private EntityRef<Color> _Color;

        #region Extensibility Method Definitions
    //partial void OnColorStrChanging(string value); // Added by Cuong
    //partial void OnColorStrChanged(); // Added by Cuong
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnKitchenIDChanging(int value);
    partial void OnKitchenIDChanged();
    partial void OnColorIDChanging(int value);
    partial void OnColorIDChanged();
    partial void OnLengthChanging(System.Nullable<decimal> value);
    partial void OnLengthChanged();
        #endregion


        public Kitchen()
		{
			this._Color = default(EntityRef<Color>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KitchenID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int 
            KitchenID
		{
			get
			{
				return this._KitchenID;
			}
			set
			{
				if ((this._KitchenID != value))
				{
					this.OnKitchenIDChanging(value);
					this.SendPropertyChanging();
					this._KitchenID = value;
					this.SendPropertyChanged("KitchenID");
					this.OnKitchenIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorID", DbType="Int NOT NULL")]
		public int ColorID
		{
			get
			{
				return this._ColorID;
			}
			set
			{
				if ((this._ColorID != value))
				{
					if (this._Color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIDChanging(value);
					this.SendPropertyChanging();
					this._ColorID = value;
					this.SendPropertyChanged("ColorID");
					this.OnColorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}

        //private string _ColorStr; /// I tried to create a column property so that we can show actual color (DIDN't WORK) 
        //// …  
        //[Column(Storage = "_ColorStr", DbType = "NVarChar(20) NOT NULL",
        //    CanBeNull = false)]
        //public string ColorStr
        //{
        //    get
        //    {
        //        return this._ColorStr;
        //    }
        //    set
        //    {
        //        if ((this._ColorStr != value))
        //        {
        //            this.OnColorStrChanging(value);
        //            this.SendPropertyChanging();
        //            this._ColorStr = value;
        //            this.SendPropertyChanged("ColorStr");
        //            this.OnColorStrChanged();
        //        }
        //    }
        //}
        [global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Kitchen", Storage="_Color", ThisKey="ColorID", OtherKey="ColorID", IsForeignKey=true)]
		public Color Color
		{
			get
			{
				return this._Color.Entity;
			}
			set
			{
				Color previousValue = this._Color.Entity;
				if (((previousValue != value) 
							|| (this._Color.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Color.Entity = null;
						previousValue.Kitchens.Remove(this);
					}
					this._Color.Entity = value;
					if ((value != null))
					{
						value.Kitchens.Add(this);
						this._ColorID = value.ColorID;
					}
					else
					{
						this._ColorID = default(int);
					}
					this.SendPropertyChanged("Color");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vanity")]
	public partial class Vanity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VanityID;
		
		private int _ColorID;
		
		private System.Nullable<decimal> _Length;
		
		private EntityRef<Color> _Color;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVanityIDChanging(int value);
    partial void OnVanityIDChanged();
    partial void OnColorIDChanging(int value);
    partial void OnColorIDChanged();
    partial void OnLengthChanging(System.Nullable<decimal> value);
    partial void OnLengthChanged();
    #endregion
		
		public Vanity()
		{
			this._Color = default(EntityRef<Color>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VanityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VanityID
		{
			get
			{
				return this._VanityID;
			}
			set
			{
				if ((this._VanityID != value))
				{
					this.OnVanityIDChanging(value);
					this.SendPropertyChanging();
					this._VanityID = value;
					this.SendPropertyChanged("VanityID");
					this.OnVanityIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorID", DbType="Int NOT NULL")]
		public int ColorID
		{
			get
			{
				return this._ColorID;
			}
			set
			{
				if ((this._ColorID != value))
				{
					if (this._Color.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColorIDChanging(value);
					this.SendPropertyChanging();
					this._ColorID = value;
					this.SendPropertyChanged("ColorID");
					this.OnColorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Length", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Length
		{
			get
			{
				return this._Length;
			}
			set
			{
				if ((this._Length != value))
				{
					this.OnLengthChanging(value);
					this.SendPropertyChanging();
					this._Length = value;
					this.SendPropertyChanged("Length");
					this.OnLengthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Color_Vanity", Storage="_Color", ThisKey="ColorID", OtherKey="ColorID", IsForeignKey=true)]
		public Color Color
		{
			get
			{
				return this._Color.Entity;
			}
			set
			{
				Color previousValue = this._Color.Entity;
				if (((previousValue != value) 
							|| (this._Color.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Color.Entity = null;
						previousValue.Vanities.Remove(this);
					}
					this._Color.Entity = value;
					if ((value != null))
					{
						value.Vanities.Add(this);
						this._ColorID = value.ColorID;
					}
					else
					{
						this._ColorID = default(int);
					}
					this.SendPropertyChanged("Color");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
